{
    attributes = (
        {
            columnName = "RO_ACCES"; 
            externalType = VARCHAR2; 
            name = roAcces; 
            valueClassName = NSString; 
            valueType = S; 
            width = 4000; 
        }, 
        {
            columnName = "RO_KEY"; 
            externalType = NUMBER; 
            name = roKey; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            columnName = "RO_LIBELLE1"; 
            externalType = VARCHAR2; 
            name = roLibelle1; 
            valueClassName = NSString; 
            valueType = S; 
            width = 200; 
        }, 
        {
            allowsNull = Y; 
            columnName = "RO_LIBELLE2"; 
            externalType = VARCHAR2; 
            name = roLibelle2; 
            valueClassName = NSString; 
            valueType = S; 
            width = 4000; 
        }, 
        {
            columnName = "RTO_KEY"; 
            externalType = NUMBER; 
            name = rtoKey; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = "SAL_NUMERO"; 
            externalType = NUMBER; 
            name = salNumero; 
            valueClassName = NSNumber; 
            valueType = i; 
        }
    ); 
    attributesUsedForLocking = (roKey, rtoKey, roLibelle1, roLibelle2, roAcces, salNumero); 
    className = "org.cocktail.superplaner.serveur.metier.ResaObjet"; 
    classProperties = (roLibelle1, roLibelle2, roAcces, resaTypeObjet, salle, resaObjetReserves); 
    externalName = "EDTSCOL.RESA_OBJET"; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        "_clientClassPropertyNames" = (roLibelle1, roLibelle2, roAcces, resaTypeObjet, salle, resaObjetReserves); 
        "_javaClientClassName" = "org.cocktail.superplan.client.metier.ResaObjet"; 
    }; 
    name = ResaObjet; 
    primaryKeyAttributes = (roKey); 
    relationships = (
        {
            destination = ResaObjetReserve; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = roKey; sourceAttribute = roKey; }); 
            name = resaObjetReserves; 
        }, 
        {
            destination = ResaTypeObjet; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = rtoKey; sourceAttribute = rtoKey; }); 
            name = resaTypeObjet; 
        }, 
        {
            destination = Salles; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = salNumero; sourceAttribute = salNumero; }); 
            name = salle; 
        }
    ); 
}
